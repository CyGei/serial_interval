f<-function(dataframe, date_column){
output<-data.frame()
week_numbers <- data.frame(start = c("01/01/2020", "01/02/2020", "01/03/2020"),
end = c("30/01/2020", "29/02/2020", "30/03/2020"),
week_no = c("1", "4", "7"))
for (i in seq_along(eval(substitute(date_column), dataframe))) {
date_to_check<- eval(substitute(date_column), dataframe)[i]
print(date_to_check)
index <- which(dmy(date_to_check) %within% interval(start = dmy(week_numbers$start), end = dmy(week_numbers$end)))
week_n <- week_numbers$week_no[index]
output<-rbind(output, cbind(date_to_check, week_n))
}
return(output)
}
f(mydf2, dates2)
f(mydf, random_dates)
as.table(matrix(c(42,12,
35,28),ncol=2,byrow=TRUE,
dimnames=list(rater=c("no","yes"),gold=c("no","yes"))))
install.packages("epi")
install.packages("Epi")
x <- rnorm( 100 )
z <- rnorm( 100 )
w <- rnorm( 100 )
tigol <- function( x ) 1 - ( 1 + exp( x ) )^(-1)
y <- rbinom( 100, 1, tigol( 0.3 + 3*x + 5*z + 7*w ) )
ROC( form = y ~ x + z, plot="ROC" )
Epi::ROC( form = y ~ x + z, plot="ROC" )
library(rlang)
sym(as_string(missing_arg()))
sym("")
sym(test)
as_string(test)
expr(test)
ez <- "exzz"
ez
expr(ez)
enexpr(ez)
quote(ez)
eval(ez)
substitute(ez)
enquo(ez)
quote(sex)
enquo(sex)
subsitute
substitute(sex)
test <- date_col
test <- "date_col"
as.name(test)
as_string(test)
as.character(as.name(test))
m <- matrix(c(1,2,3,4), nrow=2, ncol=2)
df <- data.frame(id = rep(1, nrow(m)))
View(df)
View(m)
str9df
str(df)
str(m)
df$mat <- m
str(df)
# Expression or formula
f = expression(x^2 + 5*x + 1)
f
View(f)
str(f)
deriv(f)
deriv(f, "x")
print(deriv(f, "x"))
cat("\nUsing D() function:\n")
print(D(f, 'x'))
install.packages(deSolve)
install.packages("deSolve")
library(reshape)
install.packages("reshape")
#inputs
N <- 10000 #population
state_values <- c( S = N-1, #suceptible
I = 1,   #infected
R = 0)   #recovered
state_values
#parameters
parameters <- c(beta = 1/2,  #beta = 1/infectious period (in days)
gamma = 1/4) #gamma = 1/recovery period (in days)
#timeframe
times <- seq(0,100, by = 1)
sir_model <- function(time, state, parameters){
with(as.list(c(state, parameters))){
N <- S + I + R
lamdba = beta * I/N #force of infection = beta * proportion of infected in the population
dS = -lambda*S
dI = lambda*S - gamma*I
dR = gamma*I
return(list(c(dS,dI,dR)))
}
}
sir_model <- function(time, state, parameters){
with(as.list(c(state, parameters))){
N <- S + I + R
lamdba = beta * I/N #force of infection = beta * proportion of infected in the population
dS = -lambda*S
dI = lambda*S - gamma*I
dR = gamma*I
return(list(c(dS,dI,dR)))
}
}
with(as.list(c(state, parameters)),{
N <- S + I + R
lamdba = beta * I/N #force of infection = beta * proportion of infected in the population
dS = -lambda*S
dI = lambda*S - gamma*I
dR = gamma*I
return(list(c(dS,dI,dR)))
})
sir_model <- function(time, state, parameters){
with(as.list(c(state, parameters)),{
N <- S + I + R
lamdba = beta * I/N #force of infection = beta * proportion of infected in the population
dS = -lambda*S
dI = lambda*S - gamma*I
dR = gamma*I
return(list(c(dS,dI,dR)))
})
}
sir_model()
output <- as.data.frame(ode(y = state_values,
times = times,
func = sir_model))
library(deSolve)
library(reshape)
library(ggplot2)
output <- as.data.frame(ode(y = state_values,
times = times,
func = sir_model))
output <- as.data.frame(ode(y = state_values,
times = times,
func = sir_model,
params = parameters))
output <- as.data.frame(ode(y = state_values,
times = times,
func = sir_model,
params = parameters))
sir_model <- function(time, state, parameters){
with(as.list(c(state, parameters)),{
N <- S + I + R
lamdba = beta * I/N #force of infection = beta * proportion of infected in the population
dS <- -lambda*S
dI <- lambda*S - gamma*I
dR <- gamma*I
return(list(c(dS,dI,dR)))
})
}
output <- as.data.frame(ode(y = state_values,
times = times,
func = sir_model,
params = parameters))
output
ode(y = state_values,
times = times,
func = sir_model,
ode(y = state_values,
times = times,
func = sir_model,
ode(y = state_values,
times = times,
func = sir_model)
ode(y = state_values,
times = times,
func = sir_model,
parameters = c(0.5,0.25))
ode(y = state_values,
times = times,
func = sir_model,
parames = c(0.5,0.25))
ode(y = state_values,
times = times,
func = sir_model,
params = c(0.5,0.25))
sir_model <- function(time, state, parameters,...){
with(as.list(c(state, parameters)),{
N <- S + I + R
lamdba = beta * I/N #force of infection = beta * proportion of infected in the population
dS <- -lambda*S
dI <- lambda*S - gamma*I
dR <- gamma*I
return(list(c(dS,dI,dR)))
})
}
output <- as.data.frame(ode(y = state_values,
times = times,
func = sir_model,
params = parameters))
sir_model <- function(time, state, parameters){
with(as.list(c(state, parameters)),{
N <- S + I + R
lamdba = beta * I/N #force of infection = beta * proportion of infected in the population
dS <- -lambda*S
dI <- lambda*S - gamma*I
dR <- gamma*I
return(list(c(dS,dI,dR)))
})
}
output <- as.data.frame(ode(y = state_values,
times = times,
func = sir_model,
parms = parameters))
sir_model <- function(time, state, parameters){
with(as.list(c(state, parameters)),{
N <- S + I + R
lambda = beta * I/N #force of infection = beta * proportion of infected in the population
dS <- -lambda*S
dI <- lambda*S - gamma*I
dR <- gamma*I
return(list(c(dS,dI,dR)))
})
}
output <- as.data.frame(ode(y = state_values,
times = times,
func = sir_model,
parms = parameters))
View(output)
output_full <- melt(as.data.frame(output), id = "time")
View(output_full)
state_values
output_full$proportion <- output_full$value/sum(state_values)
View(output_full)
library(dplyr)
#plot
output %>% ggplot()+
aes(x = time, y = I)+
geom_line()
output_full %>% ggplot()+
aes(x = time, y = proportion, color = variable,
group = variable)+
geom_line()
output$reff <- parameters["beta"]/parameters["gamma"] * output$S/(output$S+output$I - output$R)
View(output)
#rO
output$R0 <- parameters["beta"]/parameters["gamma"]
View(output)
geom_line(aes(y = reff))+
geom_line(aes(y = RO), color = "red"))+
geom_point(aes(y = reff, color = "green"))
geom_line(aes(y = reff))+
geom_line(aes(y = RO), color = "red")+
geom_point(aes(y = reff, color = "green"))
geom_line(aes(y = reff))+
geom_line(aes(y = RO), color = "red")+
geom_point(aes(y = reff, color = "green"))
output %>%
ggplot()+
geom_line(aes(x = time, y = reff))+
geom_line(aes(x = time, y = RO), color = "red")+
geom_point(aes(x = time, y = reff, color = "green"))
View(output)
output %>%
ggplot()+
geom_line(aes(x = time, y = reff))
output %>%
ggplot()+
geom_line(aes(x = time, y = reff))+
geom_line(aes(x = time, y = RO), color = "red")
output <- as.data.frame(ode(y = state_values,
times = times,
func = sir_model,
parms = parameters))
#plot
output %>% ggplot()+
aes(x = time, y = I)+
geom_line()
output$reff <- parameters["beta"]/parameters["gamma"] * output$S/(output$S+output$I+output$R)
parameters["beta"]/parameters["gamma"]
parameters["beta"]
parameters["gamma"]
#rO
output$R0 <- parameters["beta"]/parameters["gamma"]
output %>%
ggplot()+
geom_line(aes(x = time, y = reff))+
geom_line(aes(x = time, y = RO), color = "red")+
geom_point(aes(x = time, y = reff, color = "green"))
#rO
output$R0 <- parameters["beta"]/parameters["gamma"]
output %>%
ggplot()+
geom_line(aes(x = time, y = reff))+
geom_line(aes(x = time, y = R0), color = "red")+
geom_point(aes(x = time, y = reff, color = "green"))
output %>%
ggplot()+
geom_line(aes(x = time, y = reff))+
geom_line(aes(x = time, y = R0), color = "red")+
geom_point(aes(x = time, y = reff,) color = "green")
output %>%
ggplot()+
geom_line(aes(x = time, y = reff))+
geom_line(aes(x = time, y = R0), color = "red")+
geom_point(aes(x = time, y = reff), color = "green")
mydata <- data.frame(variable = paste0("Var", 1:32),
midpoint = rnorm(32),
stderr = rnorm(32, 1, 0.1),
stringsAsFactors = FALSE) %>%
mutate(upper = midpoint + 1.96 * stderr,
lower = midpoint - 1.96 * stderr) %>%
mutate(variable = factor(variable, levels = variable))
library(tidyverse)
mydata <- data.frame(variable = paste0("Var", 1:32),
midpoint = rnorm(32),
stderr = rnorm(32, 1, 0.1),
stringsAsFactors = FALSE) %>%
mutate(upper = midpoint + 1.96 * stderr,
lower = midpoint - 1.96 * stderr) %>%
mutate(variable = factor(variable, levels = variable))
View(mydata)
theme_geometry <- function(xvals, yvals, xgeo = 0, ygeo = 0,
color = "black", size = 1,
xlab = "x", ylab = "y",
ticks = 10,
textsize = 3,
xlimit = max(abs(xvals),abs(yvals)),
ylimit = max(abs(yvals),abs(xvals)),
epsilon = max(xlimit,ylimit)/50){
#INPUT:
#xvals .- Values of x that will be plotted
#yvals .- Values of y that will be plotted
#xgeo  .- x intercept value for y axis
#ygeo  .- y intercept value for x axis
#color .- Default color for axis
#size  .- Line size for axis
#xlab  .- Label for x axis
#ylab  .- Label for y axis
#ticks .- Number of ticks to add to plot in each axis
#textsize .- Size of text for ticks
#xlimit .- Limit value for x axis
#ylimit .- Limit value for y axis
#epsilon .- Parameter for small space
#Create axis
xaxis <- data.frame(x_ax = c(-xlimit, xlimit), y_ax = rep(ygeo,2))
yaxis <- data.frame(x_ax = rep(xgeo, 2), y_ax = c(-ylimit, ylimit))
#Add axis
theme.list <-
list(
theme_void(), #Empty the current theme
geom_line(aes(x = x_ax, y = y_ax), color = color, size = size, data = xaxis),
geom_line(aes(x = x_ax, y = y_ax), color = color, size = size, data = yaxis),
annotate("text", x = xlimit + 2*epsilon, y = ygeo, label = xlab, size = 2*textsize),
annotate("text", x = xgeo, y = ylimit + 4*epsilon, label = ylab, size = 2*textsize),
xlim(-xlimit - 7*epsilon, xlimit + 7*epsilon), #Add limits to make it square
ylim(-ylimit - 7*epsilon, ylimit + 7*epsilon)  #Add limits to make it square
)
#Add ticks programatically
ticks_x <- round(seq(-xlimit, xlimit, length.out = ticks),2)
ticks_y <- round(seq(-ylimit, ylimit, length.out = ticks),2)
#Add ticks of x axis
nlist <- length(theme.list)
for (k in 1:ticks){
#Create data frame for ticks in x axis
xtick <- data.frame(xt = rep(ticks_x[k], 2),
yt = c(xgeo + epsilon, xgeo - epsilon))
#Create data frame for ticks in y axis
ytick <- data.frame(xt = c(ygeo + epsilon, ygeo - epsilon),
yt = rep(ticks_y[k], 2))
#Add ticks to geom line for x axis
theme.list[[nlist + 4*k-3]] <- geom_line(aes(x = xt, y = yt),
data = xtick, size = size,
color = color)
#Add labels to the x-ticks
theme.list[[nlist + 4*k-2]] <- annotate("text",
x = ticks_x[k],
y = ygeo - 2.5*epsilon,
size = textsize,
label = paste(ticks_x[k]))
#Add ticks to geom line for y axis
theme.list[[nlist + 4*k-1]] <- geom_line(aes(x = xt, y = yt),
data = ytick, size = size,
color = color)
#Add labels to the y-ticks
theme.list[[nlist + 4*k]] <- annotate("text",
x = xgeo - 2.5*epsilon,
y = ticks_y[k],
size = textsize,
label = paste(ticks_y[k]))
}
#Add theme
#theme.list[[3]] <-
return(theme.list)
}
simdata <- data.frame(x = rnorm(50), y = rnorm(50))
View(simdata)
ggplot(simdata) +
theme_geometry(simdata$x, simdata$y) +
geom_point(aes(x = x, y = y), size = 3, color = "red") +
ggtitle("More geometric example")
library(ggplot2)
library("ggplot2")
install.packages("tidyverse")
library(ggplot2)
simdata <- data.frame(x = rnorm(50), y = rnorm(50))
ggplot(simdata) +
theme_geometry(simdata$x, simdata$y) +
geom_point(aes(x = x, y = y), size = 3, color = "red") +
ggtitle("More geometric example")
theme_geometry <- function(xvals, yvals, xgeo = 1, ygeo = 1,
color = "black", size = 1,
xlab = "x", ylab = "y",
ticks = 10,
textsize = 3,
xlimit = max(abs(xvals),abs(yvals)),
ylimit = max(abs(yvals),abs(xvals)),
epsilon = max(xlimit,ylimit)/50){
#INPUT:
#xvals .- Values of x that will be plotted
#yvals .- Values of y that will be plotted
#xgeo  .- x intercept value for y axis
#ygeo  .- y intercept value for x axis
#color .- Default color for axis
#size  .- Line size for axis
#xlab  .- Label for x axis
#ylab  .- Label for y axis
#ticks .- Number of ticks to add to plot in each axis
#textsize .- Size of text for ticks
#xlimit .- Limit value for x axis
#ylimit .- Limit value for y axis
#epsilon .- Parameter for small space
#Create axis
xaxis <- data.frame(x_ax = c(-xlimit, xlimit), y_ax = rep(ygeo,2))
yaxis <- data.frame(x_ax = rep(xgeo, 2), y_ax = c(-ylimit, ylimit))
#Add axis
theme.list <-
list(
theme_void(), #Empty the current theme
geom_line(aes(x = x_ax, y = y_ax), color = color, size = size, data = xaxis),
geom_line(aes(x = x_ax, y = y_ax), color = color, size = size, data = yaxis),
annotate("text", x = xlimit + 2*epsilon, y = ygeo, label = xlab, size = 2*textsize),
annotate("text", x = xgeo, y = ylimit + 4*epsilon, label = ylab, size = 2*textsize),
xlim(-xlimit - 7*epsilon, xlimit + 7*epsilon), #Add limits to make it square
ylim(-ylimit - 7*epsilon, ylimit + 7*epsilon)  #Add limits to make it square
)
#Add ticks programatically
ticks_x <- round(seq(-xlimit, xlimit, length.out = ticks),2)
ticks_y <- round(seq(-ylimit, ylimit, length.out = ticks),2)
#Add ticks of x axis
nlist <- length(theme.list)
for (k in 1:ticks){
#Create data frame for ticks in x axis
xtick <- data.frame(xt = rep(ticks_x[k], 2),
yt = c(xgeo + epsilon, xgeo - epsilon))
#Create data frame for ticks in y axis
ytick <- data.frame(xt = c(ygeo + epsilon, ygeo - epsilon),
yt = rep(ticks_y[k], 2))
#Add ticks to geom line for x axis
theme.list[[nlist + 4*k-3]] <- geom_line(aes(x = xt, y = yt),
data = xtick, size = size,
color = color)
#Add labels to the x-ticks
theme.list[[nlist + 4*k-2]] <- annotate("text",
x = ticks_x[k],
y = ygeo - 2.5*epsilon,
size = textsize,
label = paste(ticks_x[k]))
#Add ticks to geom line for y axis
theme.list[[nlist + 4*k-1]] <- geom_line(aes(x = xt, y = yt),
data = ytick, size = size,
color = color)
#Add labels to the y-ticks
theme.list[[nlist + 4*k]] <- annotate("text",
x = xgeo - 2.5*epsilon,
y = ticks_y[k],
size = textsize,
label = paste(ticks_y[k]))
}
#Add theme
#theme.list[[3]] <-
return(theme.list)
}
simdata <- data.frame(x = rnorm(50), y = rnorm(50))
ggplot(simdata) +
theme_geometry(simdata$x, simdata$y) +
geom_point(aes(x = x, y = y), size = 3, color = "red") +
ggtitle("More geometric example")
library(rtools)
library(devtools)
.libPaths()
library(Rtools)
library(devtools)
install.packages(c("remotes", "devtools", "outbreaks", "tidyverse", "rmarkdown",
"incidence", "incidence2", "i2extras", "projections", "EpiEstim",
"earlyR", "epicontacts", "outbreaker2", "distcrete", "epitrix",
"reportfactory"))
remotes::install_github(c("reconhub/linelist", "reconhub/rfextras"))
remotes::install_github("reconverse/i2extras")
library(i2extras)
remotes::install_github("reconverse/i2extras")
library(trending)
remove.packages("trending", lib="~/R/win-library/4.1")
setwd("~/OneDrive - Imperial College London/Projects/VirusWatch/writing/paper/draft/Data 2022-08-17/scripts")
list.files(paths = ".")
list.files(paths = "R")
list.files(paths = "R/")
list.files()
list.files("R/")
files <- list.files("R/")
print(files)
print(paste0("-", files)))
print(paste0("-", files))
print(paste0("- ", files))
print(paste0("- ", files, "\n"))
cat(paste0("- ", files, "\n"))
cat(paste0("- ", files,":" "\n"))
cat(paste0("- ", files,":", "\n"))
cat(paste0("- ", "*",files,"*" ,":" "\n"))
cat(paste0("- ", "*",files, "*" ,":", "\n"))
cat(paste0("- ", "**",files, "**" ,":", "\n"))
